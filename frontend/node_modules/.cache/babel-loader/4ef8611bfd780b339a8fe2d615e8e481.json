{"ast":null,"code":"import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\nimport ownerDocument from './ownerDocument';\nvar escapeKeyCode = 27;\nvar noop = function noop() {};\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nvar getRefTarget = function getRefTarget(ref) {\n  return ref && ('current' in ref ? ref.current : ref);\n};\n\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\nfunction useRootClose(ref, onRootClose, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    disabled = _ref.disabled,\n    _ref$clickTrigger = _ref.clickTrigger,\n    clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger;\n  var preventMouseRootCloseRef = useRef(false);\n  var onClose = onRootClose || noop;\n  var handleMouseCapture = useCallback(function (e) {\n    var currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  var handleMouse = useEventCallback(function (e) {\n    if (!preventMouseRootCloseRef.current) {\n      onClose(e);\n    }\n  });\n  var handleKeyUp = useEventCallback(function (e) {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  useEffect(function () {\n    if (disabled || ref == null) return undefined; // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    var currentEvent = window.event;\n    var doc = ownerDocument(getRefTarget(ref)); // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    var removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    var removeMouseListener = listen(doc, clickTrigger, function (e) {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleMouse(e);\n    });\n    var removeKeyupListener = listen(doc, 'keyup', function (e) {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleKeyUp(e);\n    });\n    var mobileSafariHackListeners = [];\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(function (el) {\n        return listen(el, 'mousemove', noop);\n      });\n    }\n    return function () {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      removeKeyupListener();\n      mobileSafariHackListeners.forEach(function (remove) {\n        return remove();\n      });\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\n}\nexport default useRootClose;","map":{"version":3,"names":["contains","listen","useCallback","useEffect","useRef","useEventCallback","warning","ownerDocument","escapeKeyCode","noop","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","getRefTarget","ref","current","useRootClose","onRootClose","_temp","_ref","disabled","_ref$clickTrigger","clickTrigger","preventMouseRootCloseRef","onClose","handleMouseCapture","e","currentTarget","target","handleMouse","handleKeyUp","keyCode","undefined","currentEvent","window","doc","removeMouseCaptureListener","removeMouseListener","removeKeyupListener","mobileSafariHackListeners","documentElement","slice","call","body","children","map","el","forEach","remove"],"sources":["D:/elaie/fashio2.0/frontend/node_modules/react-overlays/esm/useRootClose.js"],"sourcesContent":["import contains from 'dom-helpers/contains';\r\nimport listen from 'dom-helpers/listen';\r\nimport { useCallback, useEffect, useRef } from 'react';\r\nimport useEventCallback from '@restart/hooks/useEventCallback';\r\nimport warning from 'warning';\r\nimport ownerDocument from './ownerDocument';\r\nvar escapeKeyCode = 27;\r\n\r\nvar noop = function noop() {};\r\n\r\nfunction isLeftClickEvent(event) {\r\n  return event.button === 0;\r\n}\r\n\r\nfunction isModifiedEvent(event) {\r\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\r\n}\r\n\r\nvar getRefTarget = function getRefTarget(ref) {\r\n  return ref && ('current' in ref ? ref.current : ref);\r\n};\r\n\r\n/**\r\n * The `useRootClose` hook registers your callback on the document\r\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\r\n * style behavior where your callback is triggered when the user tries to\r\n * interact with the rest of the document or hits the `esc` key.\r\n *\r\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\r\n * @param {function} onRootClose\r\n * @param {object=}  options\r\n * @param {boolean=} options.disabled\r\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\r\n */\r\nfunction useRootClose(ref, onRootClose, _temp) {\r\n  var _ref = _temp === void 0 ? {} : _temp,\r\n      disabled = _ref.disabled,\r\n      _ref$clickTrigger = _ref.clickTrigger,\r\n      clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger;\r\n\r\n  var preventMouseRootCloseRef = useRef(false);\r\n  var onClose = onRootClose || noop;\r\n  var handleMouseCapture = useCallback(function (e) {\r\n    var currentTarget = getRefTarget(ref);\r\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\r\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\r\n  }, [ref]);\r\n  var handleMouse = useEventCallback(function (e) {\r\n    if (!preventMouseRootCloseRef.current) {\r\n      onClose(e);\r\n    }\r\n  });\r\n  var handleKeyUp = useEventCallback(function (e) {\r\n    if (e.keyCode === escapeKeyCode) {\r\n      onClose(e);\r\n    }\r\n  });\r\n  useEffect(function () {\r\n    if (disabled || ref == null) return undefined; // Store the current event to avoid triggering handlers immediately\r\n    // https://github.com/facebook/react/issues/20074\r\n\r\n    var currentEvent = window.event;\r\n    var doc = ownerDocument(getRefTarget(ref)); // Use capture for this listener so it fires before React's listener, to\r\n    // avoid false positives in the contains() check below if the target DOM\r\n    // element is removed in the React mouse callback.\r\n\r\n    var removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\r\n    var removeMouseListener = listen(doc, clickTrigger, function (e) {\r\n      // skip if this event is the same as the one running when we added the handlers\r\n      if (e === currentEvent) {\r\n        currentEvent = undefined;\r\n        return;\r\n      }\r\n\r\n      handleMouse(e);\r\n    });\r\n    var removeKeyupListener = listen(doc, 'keyup', function (e) {\r\n      // skip if this event is the same as the one running when we added the handlers\r\n      if (e === currentEvent) {\r\n        currentEvent = undefined;\r\n        return;\r\n      }\r\n\r\n      handleKeyUp(e);\r\n    });\r\n    var mobileSafariHackListeners = [];\r\n\r\n    if ('ontouchstart' in doc.documentElement) {\r\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(function (el) {\r\n        return listen(el, 'mousemove', noop);\r\n      });\r\n    }\r\n\r\n    return function () {\r\n      removeMouseCaptureListener();\r\n      removeMouseListener();\r\n      removeKeyupListener();\r\n      mobileSafariHackListeners.forEach(function (remove) {\r\n        return remove();\r\n      });\r\n    };\r\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\r\n}\r\n\r\nexport default useRootClose;"],"mappings":"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"},"metadata":{},"sourceType":"module"}